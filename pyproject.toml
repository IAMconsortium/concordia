[project]
authors = [
  {name = "Jonas Hoersch", email = "jonas.hoersch@climateanalytics.org"},
  {name = "Matthew Gidden", email = "matthew.gidden@gmail.com"},
]
description = "Harmonization, downscaling and gridding pipeline"
license = {text = "Apache License 2.0"}
name = "concordia"
readme = "README.rst"
requires-python = ">=3.6"

# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: Apache Software License",
]
dependencies = [
  "ptolemy-iamc>=0.3",
  "aneris-iamc>=0.2.6",
  "pandas-indexing>=0.2.10",
  "pycountry",
  "python-slugify",
  "dominate",
]
dynamic = ["version"]

[project.optional-dependencies]
lint = [
  "black",
  "ruff",
]
test = [
  "coverage",
  "pytest",
  "pytest-cov",
  "hypothesis",
  "pooch",
  "nbformat",
  "nbconvert",
]

[tool.setuptools_scm]
fallback_version = "999"

[tool.ruff]
builtins = ["ellipsis"]
exclude = [
  ".eggs",
  "doc",
  "_typed_ops.pyi",
]
target-version = "py38"
# E402: module level import not at top of file
# E501: line too long - let black worry about that
# E731: do not assign a lambda expression, use a def
# E741: ambiguous variable names
ignore = [
  "E402",
  "E501",
  "E731",
  "E741",
]
select = [
  # Pyflakes
  "F", # Pycodestyle
  "E",
  "W", # isort
  "I", # Pyupgrade
  "UP",
]

[tool.ruff.per-file-ignores]
# F401: imported but unsued
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["aneris"]
lines-after-imports = 2

[tool.jupytext]
formats = "ipynb,py:percent"

[tool.pytest.ini_options]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this py.test issue.
addopts = "--cov skele --cov-report term-missing --verbose"
minversion = "6.0"
norecursedirs = [
  "dist",
  "build",
  ".tox",
]
testpaths = [
  "tests",
]

# Use pytest markers to select/deselect specific tests
markers = [
  #     "slow: mark tests as slow (deselect with '-m \"not slow\"')",
  #     "system: mark end-to-end system tests",
  # "ipopt: requires ipopt installed from conda-forge",
]

[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=46.1.0", "setuptools_scm[toml]>=6.2"]
